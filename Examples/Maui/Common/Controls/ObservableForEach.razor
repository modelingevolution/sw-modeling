@using System.ComponentModel
@using System.Collections.Specialized

@implements IDisposable
@typeparam TItem
  
@if (IsNotifyPropertyChangedEnabled)
{
    @foreach (var i in Items())
    {
        <Observable Source="i">@ChildContent(i) </Observable>
    }
}
else
{
    @foreach (var i in Items())
    { 
        @ChildContent(i)
    }
}
    
@code {

    private IReadOnlyList<TItem> _itemSource;

    private IEnumerable<TItem> Items()
    {
        if (UseEnumerator) return _itemSource;
        else return _itemSource.SafeIterate();
    }

    [Parameter]
    public bool UseEnumerator { get; set; } = true;

    [Parameter]
    public RenderFragment<TItem> ChildContent { get; set; }

    [Parameter]
    public bool IsNotifyPropertyChangedEnabled { get; set; }

    [Parameter]
    public IReadOnlyList<TItem> ItemSource
    {
        get => _itemSource;
        set
        {
            if (object.Equals(_itemSource, value)) return;

            if (_itemSource is INotifyCollectionChanged npc)
                npc.CollectionChanged -= OnCollectionChanged;
            _itemSource = value;

            if (_itemSource is INotifyCollectionChanged npc2)
                npc2.CollectionChanged += OnCollectionChanged;
        }
    }
    
    private void OnCollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        this.InvokeAsync(this.StateHasChanged);

    }

    public void Dispose()
    {
        if (_itemSource is INotifyCollectionChanged npc2)
            npc2.CollectionChanged -= OnCollectionChanged;
    }

}